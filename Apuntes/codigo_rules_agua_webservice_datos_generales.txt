// función para consulta de nombre del contribuyente, domicilio y otros datos sobre la cuenta en WS y su almacenamiento en la ficha
$debug = 0;  // variable para debugging, cambia a 0 en producción

$contrato = $base_entity->field_clave_pago['und'][0]['value'];
if (isset($contrato) && is_numeric($contrato) && ($contrato > 0) && ($contrato < 2147483647)) {
    // para esta consulta se requiere tener número de cuenta como entero
    $var_contrato = intval($contrato);

    // ==================================
    // use of ws_nextcode module
    $xml = new SimpleXMLElement('<Body></Body>');
    try{
        // load module for communication
        drupal_load('module','ws_nextcode');
        $service = new WService();
        $contrato_obj = new getContratoAgua();
        //Define values of parameters used by webservice
        $contrato_obj->no_Contrato=$var_contrato;
        //Send petition to server with object contrato and catch result in $result
        $result=$service->getContratoAgua($contrato_obj);

        $var=get_object_vars($result);
        $keys = array_keys($var);
        $soap_result = $var[$keys[0]]->any;  // According to WS structure here go any content
        //Clean soap response information and create an array with important information
        $clean_soap_result = str_ireplace('ns2:','',$soap_result);
        $clean_soap_result = str_ireplace('soap:','',$clean_soap_result);
        $xml = simplexml_load_string($clean_soap_result);

        if ($debug) {
            // format XML for output
            if ($xml->count() > 0) {
                $domxml = new DOMDocument('1.0');
                $domxml->preserveWhiteSpace = false;
                $domxml->formatOutput = true;
                $domxml->loadXML($xml->asXML());
                $xml_format = $domxml->saveXML();
            }
            $xml_print = "<pre>CONTRATO: $contrato, XML: " . htmlspecialchars(serialize($xml_format)) . "</pre>";
            drupal_set_message($xml_print, 'warning');
        }
    }
    catch (SoapFault $e){
        //echo('<div class="messages warning"><h2 class="element-invisible">Mensaje de advertencia</h2>');
        //echo('<ul>');
        //echo('<li>Su solicitud no puede ser completada. Sistema está experimentando problemas técnicos al consultar base de datos del municipio. Regrese más tarde.</li>');
        //echo("<li>Código de error: $e->faultcode</li>");
        //echo('</ul></div>');
        drupal_set_message(t('Su solicitud no puede ser completada. Sistema está experimentando problemas técnicos al consultar base de datos del municipio. Regrese más tarde.'), 'warning');
        drupal_set_message(t("Código de error: $e->faultcode"), 'warning');
    }
    // ==================================

    if ($xml->count() > 0) {
        // consulta regresa algunos datos
        if( isset($xml->Body->GetConsultaAguaResponse->Return->Contribuyente) && $xml->Body->GetConsultaAguaResponse->Return->Contribuyente->__toString() ) {
            // existe nombre del contribuyente
            $base_entity->field_pagos_contribuyente['und'][0]['value'] = htmlspecialchars($xml->Body->GetConsultaAguaResponse->Return->Contribuyente);
        }
        if( isset($xml->Body->GetConsultaAguaResponse->Return->Domicilio) && $xml->Body->GetConsultaAguaResponse->Return->Domicilio->__toString() ) {
            // existe nombre del domicilio
            $base_entity->field_pagos_domicilio['und'][0]['value'] = htmlspecialchars($xml->Body->GetConsultaAguaResponse->Return->Domicilio);
            if( isset($xml->Body->GetConsultaAguaResponse->Return->Exterior) && $xml->Body->GetConsultaAguaResponse->Return->Exterior->__toString() ) {
                // existe numero exterior
                $base_entity->field_pagos_domicilio['und'][0]['value'] .= " ". htmlspecialchars($xml->Body->GetConsultaAguaResponse->Return->Exterior);
            }
            if( isset($xml->Body->GetConsultaAguaResponse->Return->Interior) && $xml->Body->GetConsultaAguaResponse->Return->Interior->__toString() ) {
                // existe numero interior
                $base_entity->field_pagos_domicilio['und'][0]['value'] .= " interior ". htmlspecialchars($xml->Body->GetConsultaAguaResponse->Return->Interior);
            }
        }
        if( isset($xml->Body->GetConsultaAguaResponse->Return->Colonia) && $xml->Body->GetConsultaAguaResponse->Return->Colonia->__toString() ) {
            // existe colonia
            $base_entity->field_pagos_colonia['und'][0]['value'] = htmlspecialchars($xml->Body->GetConsultaAguaResponse->Return->Colonia);
        }
        if( isset($xml->Body->GetConsultaAguaResponse->Return->Localidad) && $xml->Body->GetConsultaAguaResponse->Return->Localidad->__toString() ) {
            // existe localidad
            $base_entity->field_pago_localidad['und'][0]['value'] = htmlspecialchars($xml->Body->GetConsultaAguaResponse->Return->Localidad);
        }
        if( isset($xml->Body->GetConsultaAguaResponse->Return->Calles) && $xml->Body->GetConsultaAguaResponse->Return->Calles->__toString() ) {
            if (trim($xml->Body->GetConsultaAguaResponse->Return->Calles) != "y") {
                // existen datos sobre entre calles
                $base_entity->field_pago_entre_calles['und'][0]['value'] = htmlspecialchars($xml->Body->GetConsultaAguaResponse->Return->Calles);
            }
        }
        if( isset($xml->Body->GetConsultaAguaResponse->Return->FechaApertura) && $xml->Body->GetConsultaAguaResponse->Return->FechaApertura->__toString() ) {
           // existen datos sobre fecha de apertura de cuenta 
           // por medio de regexp descartamos la hora, solo dejamos fecha
           preg_match('/^(\d{1,2})\/(\d{1,2})\/(\d{4})\s*/', $xml->Body->GetConsultaAguaResponse->Return->FechaApertura , $matches);
           if ( $matches[1] && $matches[2] && $matches[3] ) {
                // parece que tenemos fecha es correcto
                $date_ap_string = $matches[3] . '-' . $matches[2] . '-' . $matches[1] . 'T00:00:00';
                $base_entity->field_pago_fecha_apertura['und'][0]['value'] = $date_ap_string;
           }
           //unset $matches;
        }

    } else {
        // la nueva ficha no debe quedar registrada debido a que no existe respuesta con datos (por error de webservice)
        drupal_set_message(t('Su solicitud no puede ser completada. Sistema está experimentando problemas técnicos al consultar base de datos del municipio. Regrese más tarde.'), 'warning');
        return FALSE;
    }
}
return TRUE;
